* {
  /* Clear up inconsistencies between browsers and normalize sizing */
  margin: 0;
  padding: 0; 
  box-sizing: border-box;
  font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
}
p {
  margin: 1em 0
}

:root {
  /* Use these as var(--color-white) ... */
  --color-white: #F7F7F7;
  --color-black: #1F2421;
  --color-gray: #858585;
  --color-green: #4DA078;
  --color-light-blue: #2E8BD0;
  --color-dark-blue: #21699B;
  --color-gold: #ffc94b;
  --color-red: #e13e2e;
}

/* TODO: Ideally we should have module/component-localized CSS files and just have webpack combine them */

.App {
  margin: 0 auto;
  padding: 0;
  width: 100%;
  background-color: var(--color-black);
  height: 100vh;
  display: grid;
}
.App.GuestLayout {
  /* When the user's not logged in, we want to display the GuestNav on top of the main content */
  grid-template:
    "GuestNav" 60px
    "main" 1fr
    / 100%;
}
.App.UserLayout {
  /* When the user's logged in, we want to display the UserNav side by side with the main content */
  grid-template:
    "UserNav main" 1fr
    / 20% 1fr
}

.GuestNav {
  /* This could be a traditional topbar nav that appears only on guest home */
  grid-area: GuestNav;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  background-color: var(--color-gray);
  padding: 0 20px;
  height: 60px;
}

.UserNav {
  /* This'll be as we've designed: A fixed-to-left sidebar nav. We'd like it to be toggle-able */
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  align-self: stretch;
  flex-wrap: nowrap;
  flex-grow: 0;
  background-color: var(--color-gray);
  padding: 30px 20px;
  border-right: 1px solid var(--color-black);
}

button {
  border: none;
  outline: none;
  border-radius: 5px;
  padding: 0.5em;
  margin: 0.5em;
  font-size: 1em;
  font-weight: bold;
  background-color: var(--color-dark-blue);
  color: var(--color-white);
  cursor: pointer;
}

input[type="text"],
input[type="password"],
input[type="email"],
input[type="number"] {
  border: none;
  outline: none;
  border-radius: 5px;
  padding: 0.5em;
  margin: 0.5em;
  font-size: 1em;
  font-weight: bold;
  background-color: var(--color-white);
  color: var(--color-black);
  width: 100%;
}

input[type="text"]:focus,
input[type="password"]:focus,
input[type="email"]:focus,
input[type="number"]:focus {
  /* On focus, maybe have a box-shadow / glow outline appear */
  outline: 2px solid var(--color-dark-blue);
  box-shadow: 0 0 10px 2px var(--color-light-blue);
}

main {
  border: 1px solid black;
  grid-area: main;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  align-self: stretch;
  flex-wrap: nowrap;
  flex-grow: 1;
  background-color: var(--color-black);
  height: 100%;
  padding: 2%;
  color: var(--color-white);
}

/* For forms */
/* #loginForm, #registerForm { */
form { 
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  justify-self: flex-start;
}
.formRow {
  display: flex;
  width: 100%;
  margin-bottom: 0.5em;
}
.inputVertical {
  display: flex;
  flex-direction: column;
}
.inputHorizontal {
  display: flex;
  flex-direction: row;
}
.flexButtonsEitherSide {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}


/* For rounded blue and gray buttons */
.roundedBlue {
  background-color: var(--color-dark-blue);
  color: var(--color-white);
  border: none;
  border-radius: 5px;
  padding: 0.5em;
  margin: 0.5em;
  font-size: 1em;
  font-weight: bold;
  cursor: pointer;
}
.roundedGray {
  background-color: var(--color-gray);
  color: var(--color-white);
  border: none;
  border-radius: 5px;
  padding: 0.5em;
  margin: 0.5em;
  font-size: 1em;
  font-weight: bold;
  cursor: pointer;
}

/* Styles <Link> components */
.Link {
  text-decoration: none;
  color: var(--color-dark-blue);
}
.Link:link {
  /* text-decoration: none;
  color: var(--color-dark-blue); */
}

/* Maybe extract Link to a sep. comp. instead of constantly styling it independenly */
/* .Link--underline {
  text-decoration: underline;
}
.Link--light {
  color: var(--color-light-blue);
} */

.pageHeading {
  margin: 0.67em 0;
}
.centerContent {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.centerText {
  text-align: center;
}

.width-100 {
  width: 100%;
}

.imageShadow {
  filter: drop-shadow(0px 0px 10px var(--color-dark-blue));
}
