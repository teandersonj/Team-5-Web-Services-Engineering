* {
  box-sizing: border-box;
  font-family: "Noto Sans", sans-serif;
}

body {
  margin: 0;
  padding: 0;
}

select {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  padding: 0.5em;
  margin: 0;
  font-size: inherit;
  font-family: inherit;
  border: 1px solid var(--color-black);
  background-color: var(--color-white);
  color: var(--color-black);
}

/* Allow our color palette to be used as CSS variables */
:root {
  /* Use these as var(--color-white) ... */
  --color-white: #F7F7F7;
  --color-black: #1F2421;
  --color-gray: #5b5b5b;
  --color-green: #4DA078;
  --color-light-blue: #2E8BD0;
  --color-dark-blue: #21699B;
  --color-gold: #ffc94b;
  --color-red: #e13e2e;
  --color-pink: #e13e7e;
}

/* TODO: Ideally we should have module/component-localized CSS files and just have webpack combine them */

/* Controls the layout of the entire app, with variation depending on if user's logged in or not */
.App {
  margin: 0 auto;
  padding: 0;
  width: 100%;
  background-color: var(--color-black);
  height: 100vh;
  display: grid;
}

.App.GuestLayout {
  /* When a user's not logged in, don't show the nav on the left */
  grid-template:
    "main" 1fr
    / 100%;
}

.App.UserLayout {
  /* When the user's logged in, we want to display the UserNav side by side with the main content */
  grid-template:
    "UserNav main" 1fr
    / 20% 1fr;
}

/* End of App */

.UserNav {
  /* This'll be as we've designed: A fixed-to-left sidebar nav.
  TODO: We'd like it to be toggle-able */
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  align-self: stretch;
  flex-wrap: nowrap;
  flex-grow: 0;
  background-color: var(--color-gray);
  padding: 30px 20px;
  border-right: 1px solid var(--color-black);
  color: var(--color-white)
}

.UserNav .navLinks a {
  display: block;
  text-decoration: none;
  color: white;
  font-size: 26px;
  text-underline-offset: uppercase;
}

.UserNav .navLinks a.active {
  color: var(--color-light-blue);
}

.UserNav .navLinks a:hover {
  color: var(--color-dark-blue);
}

.modal {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  color: white;
  background-color: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modalContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--color-black);
  padding: 1em;
  border-radius: 5px;
  box-shadow: 0 0 5px var(--color-black);
  z-index: 1001;
  width: 17.5vw;
  height: 450px;
}

.modalContainer .modalHeader {
  display: flex;
  align-self: flex-start;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  margin-bottom: 1em;
}

/* For buttons */
button {
  border: none;
  outline: none;
  border-radius: 5px;
  margin: 0.5em 0;
  font-size: 1em;
  font-weight: bold;
  background-color: var(--color-dark-blue);
  color: var(--color-white);
  cursor: pointer;
  min-height: 30px;
}

.btnIcon {
  height: 12px;
  width: 12px;
  margin: 0em 0.3em;
}

/* For rounded Buttons */
.roundedBlueBtn {
  background-color: var(--color-dark-blue);
  color: var(--color-white);
  border: none;
  border-radius: 7px;
  padding: 0.5em;
  margin: 0.5em 0.1em;
  font-size: 1em;
  font-weight: bold;
  cursor: pointer;
  box-shadow: 0 0 5px var(--color-black);
}

.roundedBlueBtn:hover {
  background-color: var(--color-light-blue);
}

.longRoundedBlueBtn {
  background-color: var(--color-dark-blue);
  color: var(--color-white);
  border: none;
  border-radius: 20px;
  width: 10em;
  height: 33px;
  padding: 0.5em;
  margin: 0.3em;
  font-size: 1em;
  font-weight: bold;
  cursor: pointer;
  box-shadow: rgba(0, 0, 0, 0.25) 3px 3px 5px;
}

.longRoundedBlueBtn:hover {
  background-color: var(--color-light-blue);
}

.roundedGrayBtn {
  background-color: var(--color-gray);
  color: var(--color-white);
  border: none;
  border-radius: 5px;
  padding: 0.5em;
  margin: 0.5em;
  font-size: 1em;
  font-weight: bold;
  cursor: pointer;
}

.roundedGrayBtn:hover {
  background-color: var(--color-black);
}

.longRoundedRedBtn {
  background-color: #b02c20;
  color: var(--color-white);
  border: none;
  border-radius: 20px;
  width: 10em;
  height: fit-content;
  max-height: 55px;
  padding: 0.5em;
  margin: 0.3em;
  font-size: 1em;
  font-weight: bold;
  cursor: pointer;
  box-shadow: rgba(0, 0, 0, 0.25) 3px 3px 5px;
}

.longRoundedRedBtn:hover {
  background-color: #e13e2e;
}
/* End Buttons */

/* For text-like <input> elements */
input[type="text"],
input[type="password"],
input[type="email"],
input[type="number"],
textarea,
select {
  border: none;
  outline: none;
  border-radius: 5px;
  padding: 0.5em;
  margin: 0.5em auto;
  font-size: 1em;
  font-weight: bold;
  background-color: var(--color-white);
  color: var(--color-black);
  width: 100%;
  min-width: 125px;
}

input[type="text"]:focus,
input[type="password"]:focus,
input[type="email"]:focus,
input[type="number"]:focus,
textarea:focus,
select:focus {
  /* On focus, maybe have a box-shadow / glow outline appear */
  outline: 2px solid var(--color-dark-blue);
  box-shadow: 0 0 10px 2px var(--color-light-blue);
}

/* We need to style disabled inputs differently */
input[type="text"]:disabled,
input[type="password"]:disabled,
input[type="email"]:disabled,
input[type="number"]:disabled,
textarea:disabled,
select:disabled {
  background-color: var(--color-gray);
  color: var(--color-white);
}

.inputInvalid {
  background-color: var(--color-pink);
  color: var(--color-white);
  border: 1px solid var(--color-red);
  /* We could use transitions to only show this error styling for a little bit to alert
    the user then hide it to enable normal input accessibility */
}
/* End of text-like <input> elements */

main {
  border: 1px solid black;
  grid-area: main;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  align-self: stretch;
  flex-wrap: nowrap;
  flex-grow: 1;
  background-color: var(--color-black);
  height: 100%;
  padding: 2%;
  color: var(--color-white);
  overflow: auto;
}

.sectionContainer {
  /* This is used to layout the leftSection and rightSections either side-to-side or top-to-bottom depending on viewport width */
  /* We'll use a grid to have better control over section width, since leftSection will take up 25% width on desktop */
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  grid-template-areas: "leftSection" "rightSection";
  width: 100%;
  height: 100%;
}

.rightSection {
  overflow: auto;
}

/* On large enough screens show the sections side by side */
@media screen and (min-width: 768px) {
  .sectionContainer {
    grid-template-columns: 25% 1fr;
    grid-template-rows: 1fr;
    grid-template-areas: "leftSection rightSection";
  }

  .rightSection {
    padding: 0 1em;
  }
}

/* For forms */
/* #loginForm, #registerForm { */
form {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  justify-self: flex-start;
}

.formRow {
  display: flex;
  width: 100%;
  margin-bottom: 0.5em;
}

/* End of forms */

/* Styles <Link> components */
.Link {
  text-decoration: none;
  color: var(--color-dark-blue);
}

.Link:link {
  /* text-decoration: none;
  color: var(--color-dark-blue); */
}

/* Maybe extract Link to a sep. comp. instead of constantly styling it independenly */
/* .Link--underline {
  text-decoration: underline;
}
.Link--light {
  color: var(--color-light-blue);
} */

/* Utility classes */
.pageHeading {
  width: fit-content;
  margin: 0.67em auto;
  font-size: 2.5em;
  font-family: "Inter", sans-serif;
  text-transform: uppercase;
  border-bottom: 1px solid var(--color-gold);
  align-self: center;
  letter-spacing: 5px;
}

.centerContent {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.centerText {
  text-align: center;
}

.width-100 {
  width: 100%;
}

.imageShadow {
  filter: drop-shadow(0px 0px 10px var(--color-dark-blue));
}

.flexDirectionColumn {
  display: flex;
  flex-direction: column;
}

.flexDirectionRow {
  display: flex;
  flex-direction: row;
}

.justifySelfCenter {
  display: flex;
  justify-self: center;
}

.alignSelfCenter {
  display: flex;
  align-self: center;
}

.justifyContentFlexStart {
  display: flex;
  justify-content: flex-start;
}

.justifyContentFlexEnd {
  display: flex;
  justify-content: flex-end;
}

.justifyContentSpaceBetween {
  display: flex;
  justify-content: space-between;
}

.justifyContentSpaceEvenly {
  display: flex;
  justify-content: space-evenly;
}

.justifyContentCenter {
  display: flex;
  justify-content: center;
}

.justifyContentStretch {
  display: flex;
  justify-content: stretch;
}

.alignItemsCenter {
  align-items: center;
}

.flexGrow-1 {
  flex-grow: 1;
}

.flexWrap-True {
  flex-wrap: wrap;
}

.overflowXAuto {
  overflow-x: scroll;
}

.overflowXScroll {
  overflow-x: scroll;
}

.fontInter {
  font-family: "Inter", sans-serif;
}

.fontSizeSemiLarge {
  font-size: 1.5em;
}

.hidden {
  display: none;
}
/* End of utility classes */

/* For the <img> elements */
.Logo {
  width: 100%;
  max-width: 200px;
  height: auto;
  border-radius: 50%;
  border: 1px solid var(--color-black);
  box-shadow: 0 0 10px 2px var(--color-dark-blue);
}
/* End of <img> elements */

/* For GameCard */
.GameCard {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: space-between;
  align-self: stretch;
  max-height: 35vh;
  width: 100%;
  color: var(--color-white);
  border-radius: 10px;
  box-shadow: 0 0 10px 2px var(--color-gray);
  padding: 1%;
  margin: 10px auto;
  border: 1px solid var(--color-white);
}

.PlayerCard-small {
  display: flex;
  flex-direction: column;
  max-width: 125px;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  color: var(--color-white);
  /* margin: 10px; */
  text-align: center;
}

.PlayerCard-small .LabeledInput {
  /* Ensure the inpt field is not wider than the card */
  flex-wrap: wrap;
  padding: 0;
  margin: 0;
  overflow: hidden;
}

.PlayerCard-small .LabeledInput input {
  padding: 0;
  max-width: 100px;
  text-align: center;
}

/* For the large size player card we can show the first and last name in horizontal spread */
.PlayerCard-large {
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
  align-self: stretch;
  flex-wrap: wrap;
  height: 100%;
  color: var(--color-white);
  border-radius: 10px;
  box-shadow: 0 0 10px 2px var(--color-gray);
  background-color: var(--color-gray);
  width: 75%;
  padding: 2%;
  margin: 10px auto;
  border: 1px solid var(--color-white);
}

/* Player Status Displays */
/* Button like displays that show the player's status */
.blueStatusWide {
  background-color: var(--color-light-blue);
  color: var(--color-white);
  border: none;
  border-radius: 20px;
  width: 10em;
  height: 33px;
  padding: 0.5em;
  margin: 0.3em;
  font-size: 1em;
  font-weight: bold;
  text-align: center;
  cursor: default;
  box-shadow: rgba(0, 0, 0, 0.25) 3px 3px 5px;
}

.greenStatusWide {
  background-color: var(--color-green);
  color: var(--color-white);
  border: none;
  border-radius: 20px;
  width: 10em;
  height: 33px;
  padding: 0.5em;
  margin: 0.3em;
  font-size: 1em;
  font-weight: bold;
  text-align: center;
  cursor: default;
  box-shadow: rgba(0, 0, 0, 0.25) 3px 3px 5px;
}

.greyStatusWide {
  background-color: #535353;
  color: var(--color-white);
  border: none;
  border-radius: 20px;
  width: 10em;
  height: 33px;
  padding: 0.5em;
  margin: 0.3em;
  font-size: 1em;
  font-weight: bold;
  text-align: center;
  cursor: default;
  box-shadow: rgba(0, 0, 0, 0.25) 3px 3px 5px;
}

/*Friends List*/
#openFriendsListBtn {
  position: fixed;
  bottom: 0;
  right: 0;
  padding: 1rem;
  background-color: var(--color-gray);
  border: 1px solid var(--color-white);
  border-radius: 10px;
  box-shadow: 0 0 10px 2px var(--color-dark-blue);
  z-index: 100;
}
/* Make it into a popup on the bottom right */
.friends-list {
  position: fixed;
  bottom: 0;
  right: 0;
  width: 30vw;
  height: 70vh;
  padding: 1rem;
  background-color: var(--color-black);
  border-radius: 10px;
  box-shadow: 0 0 10px 5px var(--color-gray);
  opacity: 1;
  z-index: 100;
  overflow-y: scroll;
  overflow-x: hidden;
}

.friends-list-body .flexDirectionColumn {
  margin-bottom: 10px;
  /* padding: 5px; */
}
